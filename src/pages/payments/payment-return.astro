---
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-gray-100"
  >
    <div class="bg-white p-8 rounded-lg shadow-md max-w-md w-full">
      <h1 class="text-2xl font-bold mb-4 text-center text-gray-800">
        Payment Processing
      </h1>

      <div id="loading" class="text-center">
        <p class="mb-4 text-gray-600">
          Processing your payment, please wait...
        </p>
        <div
          class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"
        >
        </div>
      </div>

      <div id="result" class="hidden text-center">
        <div id="resultMessage" class="mb-4 text-lg flex flex-col items-center">
        </div>
        <a
          href="/"
          class="inline-block bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
        >
          Return to Home
        </a>
      </div>
    </div>
  </div>

  <script>
    async function processPayment() {
      const urlParams = new URLSearchParams(window.location.search);
      const cid = urlParams.get("cid");
      const publicToken = localStorage.getItem("snipcartSessionToken");
      localStorage.removeItem("snipcartSessionToken");

      if (!publicToken || !cid) {
        showResult(
          "Missing required parameters. Please try again.",
          "text-red-500",
        );
        return;
      }

      try {
        const response = await fetch(
          `https://${window.location.host}/.netlify/functions/payment-return?publicToken=${encodeURIComponent(publicToken)}&cid=${encodeURIComponent(cid)}`,
        );

        if (response.ok) {
          const data = await response.json();
          showResult(
            `Payment processed successfully with reference: ${data.reference}. Your receipt has been emailed to you.`,
            "neutral",
          );
        } else {
          let error = await response.text();
          error = error.length > 0 ? JSON.parse(error).error : null;
          error = error ?? `Unknown error ${response.status}`;
          error = urlParams.get("error") ?? error; // If an error is in the query string, use that instead
          showResult(`${error}`, "text-red-500");
        }
      } catch (error) {
        console.error("Error completing payment", error);
        showResult(
          "An error occurred while processing the payment. Please try again.",
          "text-red-500",
        );
      }
    }

    function showResult(message: string, type: string) {
      const loadingEl = document.getElementById("loading");
      const resultEl = document.getElementById("result");
      const resultMessageEl = document.getElementById("resultMessage");

      if (loadingEl) loadingEl.classList.add("hidden");
      if (resultEl) resultEl.classList.remove("hidden");
      if (resultMessageEl) {
        if (type === "neutral") {
          resultMessageEl.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-green-500 mt-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
            </svg>
            <span class="text-gray-700">${message}</span>
          `;
        } else {
          resultMessageEl.innerHTML = `<span class="${type}">${message}</span>`;
        }
      }
    }

    processPayment();
  </script>
</BaseLayout>
